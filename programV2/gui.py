import numpy as np
import streamlit as st
import pandas as pd
import os
from reader import WindDataReader
from processor import WindProfileProcessor
from visualization import plot_profile
from regularization import CoordinateRegularizer, compute_metrics

st.set_page_config(page_title="Wind Profile Analysis")
st.title("üå¨Ô∏è –ê–Ω–∞–ª—ñ–∑ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")

folder = st.text_input("–®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ CSV:", value="real_data")

if os.path.isdir(folder):
    reader = WindDataReader(folder)
    datasets = reader.load_all()

    if datasets:
        file_names = [name for name, _ in datasets]
        selected = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª:", file_names)
        df = dict(datasets)[selected]
        if '–Ü—Å—Ç–∏–Ω–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (–º/—Å)' in df.columns:
            df.rename(columns={'–Ü—Å—Ç–∏–Ω–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (–º/—Å)': 'v_true'}, inplace=True)

        available_methods = CoordinateRegularizer.available_methods()
        method = st.selectbox("–ú–µ—Ç–æ–¥ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è:", available_methods, index=1)

        # --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è ---
        smooth_kwargs = {}
        if method == "savgol":
            window_length = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –≤—ñ–∫–Ω–∞ (Savgol)", min_value=3, max_value=101, value=11, step=2)
            polyorder = st.number_input("–°—Ç–µ–ø—ñ–Ω—å –ø–æ–ª—ñ–Ω–æ–º–∞ (Savgol)", min_value=1, max_value=5, value=2)
            smooth_kwargs = {"window_length": window_length, "polyorder": polyorder}
        elif method == "spline":
            smooth_factor = st.slider("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è (Spline)", min_value=0.0, max_value=10.0, value=1.0, step=0.1)
            smooth_kwargs = {"smooth_factor": smooth_factor}
        elif method == "ma":
            window = st.number_input("–î–æ–≤–∂–∏–Ω–∞ –≤—ñ–∫–Ω–∞ (MA)", min_value=2, max_value=101, value=5, step=1)
            smooth_kwargs = {"window": window}
        elif method == "kalman":
            process_variance = st.number_input("Process variance (Kalman)", min_value=1e-6, max_value=1.0, value=1e-3, format="%.6f")
            measurement_variance = st.number_input("Measurement variance (Kalman)", min_value=1e-3, max_value=10.0, value=1.0)
            smooth_kwargs = {"process_variance": process_variance, "measurement_variance": measurement_variance}
        elif method == "tikhonov":
            alpha = st.number_input("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü—ñ—ó (Tikhonov)", min_value=1e-5, max_value=1.0, value=1e-2, format="%.5f")
            smooth_kwargs = {"alpha": alpha}
        # --- –ö—ñ–Ω–µ—Ü—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ ---

        # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –±–µ–∑ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è (–¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è)
        processor_raw = WindProfileProcessor(df, method="none")
        processor_raw.process()

        # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –∑ –æ–±—Ä–∞–Ω–∏–º –º–µ—Ç–æ–¥–æ–º —ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        processor = WindProfileProcessor(df, method=method, **smooth_kwargs)
        processor.process()

        # –ì—Ä–∞—Ñ—ñ–∫ "–¥–æ/–ø—ñ—Å–ª—è"
        st.pyplot(plot_profile(processor_raw, processor))

        st.dataframe(pd.DataFrame({
            "–í–∏—Å–æ—Ç–∞ (–º)": processor.alt[1:],
            "–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É (–º/—Å)": processor.v_wind
        }))

        # === –ú–ï–¢–†–ò–ö–ò: –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏–∫–∏ ‚Äî –∫–ª–∞—Å–∏—á–Ω—ñ, –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        if "v_true" in df.columns:
            metrics = compute_metrics(df["v_true"].values, processor.v_wind)
            st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É")
            st.table(pd.DataFrame([metrics]))

            st.subheader("üìã –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—Å—ñ—Ö –º–µ—Ç–æ–¥—ñ–≤")
            all_metrics = []
            for m in available_methods:
                proc = WindProfileProcessor(df.copy(), method=m)
                proc.process()
                method_metrics = compute_metrics(df["v_true"].values, proc.v_wind)
                method_metrics = {"–ú–µ—Ç–æ–¥": m, **method_metrics}
                all_metrics.append(method_metrics)

            df_metrics = pd.DataFrame(all_metrics).set_index("–ú–µ—Ç–æ–¥")
            st.dataframe(df_metrics)
        else:
            # –î–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ/–ø—ñ—Å–ª—è –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–∑–≥–ª–∞–¥–∂–µ–Ω–æ—ó):")
            if len(processor.v_wind) > 0:
                st.markdown(f"**–°–µ—Ä–µ–¥–Ω—î**: `{np.mean(processor.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú–µ–¥—ñ–∞–Ω–∞**: `{np.median(processor.v_wind):.3f}` –º/—Å")
                st.markdown(f"**Std**: `{np.std(processor.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú–∞–∫—Å–∏–º—É–º**: `{np.max(processor.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú—ñ–Ω—ñ–º—É–º**: `{np.min(processor.v_wind):.3f}` –º/—Å")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫.")

            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–±–µ–∑ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è):")
            if len(processor_raw.v_wind) > 0:
                st.markdown(f"**–°–µ—Ä–µ–¥–Ω—î**: `{np.mean(processor_raw.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú–µ–¥—ñ–∞–Ω–∞**: `{np.median(processor_raw.v_wind):.3f}` –º/—Å")
                st.markdown(f"**Std**: `{np.std(processor_raw.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú–∞–∫—Å–∏–º—É–º**: `{np.max(processor_raw.v_wind):.3f}` –º/—Å")
                st.markdown(f"**–ú—ñ–Ω—ñ–º—É–º**: `{np.min(processor_raw.v_wind):.3f}` –º/—Å")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫.")

            st.subheader("üìä –í—ñ–¥–Ω–æ—Å–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (–¥–æ/–ø—ñ—Å–ª—è –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è):")
            if len(processor_raw.v_wind) > 0 and len(processor.v_wind) > 0:
                min_len = min(len(processor_raw.v_wind), len(processor.v_wind))
                abs_diff = np.abs(processor_raw.v_wind[:min_len] - processor.v_wind[:min_len])
                st.markdown(f"**–°–µ—Ä–µ–¥–Ω—î –∞–±—Å–æ–ª—é—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:** `{np.mean(abs_diff):.3f}` –º/—Å")
                st.markdown(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:** `{np.max(abs_diff):.3f}` –º/—Å")
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤.")

        # –í–∏–≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ –∑–∞–º–∞–ª–æ —Ç–æ—á–æ–∫
        if len(processor.v_wind) == 0:
            st.warning("–£ —Ñ–∞–π–ª—ñ –∑–∞–º–∞–ª–æ —Ç–æ—á–æ–∫ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É!")

    else:
        st.warning("–£ –ø–∞–ø—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏—Ö CSV-—Ñ–∞–π–ª—ñ–≤.")
else:
    st.warning("–ü–∞–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
